<?xml version='1.0' encoding='UTF-8'?>
<beans xmlns='http://www.springframework.org/schema/beans'
       xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
       xmlns:context='http://www.springframework.org/schema/context'
       xmlns:tx='http://www.springframework.org/schema/tx'
       xmlns:mvc='http://www.springframework.org/schema/mvc'
       xmlns:security='http://www.springframework.org/schema/security'
       xsi:schemaLocation='
       http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.1.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
http://www.springframework.org/schema/mvc
http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security-3.1.xsd'>


    <mvc:annotation-driven />


    <!-- we can use annotations -->
    <context:annotation-config />

    <!-- package to look for annotated classes -->
    <!--<context:component-scan base-package='org.opendata.service.impl' />-->

    <!-- data source for our database -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/opendata"></property>
        <property name="username" value="uopendata"></property>
        <property name="password" value="a5088l"></property>
    </bean>


    <!-- configure hibernate session factory -->
    <bean id='sessionFactory'
          class='org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean'>
        <property name='dataSource' ref='dataSource' />
        <property name='annotatedClasses' >
            <list>
                <value>org.opendata.domain.Usuario</value>
                <value>org.opendata.domain.Consulta</value>
            </list>
        </property>
        <property name='hibernateProperties'>
            <props>
                <prop key='hibernate.dialect'>org.hibernate.dialect.MySQL5InnoDBDialect</prop>
                <prop key='hibernate.show_sql'>true</prop>
                <prop key='hibernate.hbm2ddl.auto'>update</prop>
            </props>
        </property>
    </bean>

    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="persistenceUnitName" value="examplePU" />
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="generateDdl" value="true" />
                <property name="showSql" value="true" />
            </bean>
        </property>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" />

    <!--<bean id='transactionManager'
          class='org.springframework.orm.hibernate3.HibernateTransactionManager'>
        <property name='sessionFactory' ref='sessionFactory' />
    </bean>-->

    <!--<bean id='jdbcTemplate'
          class='org.springframework.jdbc.core.simple.SimpleJdbcTemplate'>
        <constructor-arg type='javax.sql.DataSource' ref='dataSource'/>
    </bean>-->


    <bean id="userDao" class="org.opendata.service.impl.UsuarioDaoImpl"></bean>
    <bean id="consultaDao" class="org.opendata.service.impl.ConsultaDaoImpl"></bean>


    <!--<bean id="dataBaseInitializer" class="org.opendata.service.DatabaseInitializer" init-method="initDataBase">
        <constructor-arg ref="consultaDao" />
        <constructor-arg ref="userDao" />
    </bean>-->

    <!--
        INIT REST COMPONENTS
     -->

    <context:component-scan base-package="org.opendata.rest.resources" />

    <!--
        SPRING SECURITY SETUP
    -->


    <bean id="passwordEncoder" class="org.opendata.security.SHA256SaltedEncoder">
        <constructor-arg value="secret" />
    </bean>

    <security:authentication-manager id="authenticationManager">
        <security:authentication-provider user-service-ref="userDao">
            <security:password-encoder ref="passwordEncoder"></security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>

    <security:http
            realm="Protected API"
            use-expressions="true"
            auto-config="false"
            create-session="stateless"
            entry-point-ref="unauthorizedEntryPoint"
            authentication-manager-ref="authenticationManager">
        <security:custom-filter ref="authenticationTokenProcessingFilter" position="FORM_LOGIN_FILTER" />
        <security:intercept-url pattern="/user/authenticate" access="permitAll" />
        <security:intercept-url method="GET" pattern="/sparql.html" access="hasRole('user')" />
        <security:intercept-url method="GET" pattern="/userpage.html" access="hasRole('user')" />
        <security:intercept-url method="GET" pattern="/explore.html" access="hasRole('user')" />

        <security:intercept-url method="GET" pattern="/admin**" access="hasRole('admin')" />

        <!--<security:intercept-url method="GET" pattern="/xyz/QueryResource/**" access="hasRole('user')" />-->

        <security:intercept-url method="GET" pattern="/xyz/querys/**" access="hasRole('user')" />
        <security:intercept-url method="POST" pattern="/xyz/querys/**" access="hasRole('user')" />

        <security:intercept-url method="GET" pattern="/rest/news/**" access="hasRole('user')" />
        <security:intercept-url method="PUT" pattern="/rest/news/**" access="hasRole('admin')" />
        <security:intercept-url method="POST" pattern="/rest/news/**" access="hasRole('admin')" />
        <security:intercept-url method="DELETE" pattern="/rest/news/**" access="hasRole('admin')" />
    </security:http>

    <bean id="unauthorizedEntryPoint" class="org.opendata.rest.UnauthorizedEntryPoint" />

    <bean class="org.opendata.rest.AuthenticationTokenProcessingFilter" id="authenticationTokenProcessingFilter">
        <constructor-arg ref="userDao" />
    </bean>

</beans>